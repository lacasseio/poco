model {
	repositories {
		libs(PrebuiltLibraries) {
			postgres {
				binaries.withType(StaticLibraryBinary) {
					def libName = "foobar"
					if (buildType == buildTypes.debug) {
						libName = 'libmysqld.lib'
						if (targetPlatform == 'win32') {
							headers.srcDir "$postgres32Home/include"
							staticLibraryFile = file("$postgres32Home/lib/$libName")
						} else
						if (targetPlatform == 'win64') {
							headers.srcDir "$postgres64Home/include"
							staticLibraryFile = file("$postgres64Home/lib/$libName")
						}
					} else
					if (buildType == buildTypes.release) {
						libName = 'libmysql.lib'
						if (targetPlatform == 'win32') {
							headers.srcDir "$postgres32Home/include"
							staticLibraryFile = file("$postgres32Home/lib/$libName")
						} else
						if (targetPlatform == 'win64') {
							headers.srcDir "$postgres64Home/include"
							staticLibraryFile = file("$postgres64Home/lib/$libName")
						}
					} else {
						throw new GradleException("Unknown buildType" + buildType)
					}
				}
			}
		}
	}
	components {
		DataPostgreSQL(NativeLibrarySpec) {
			sources {
				rc {
					source {
						srcDir '../..'
						include 'DLLVersion.rc'
					}
				}
				cpp {
					source {
						srcDir 'src'
						include '**/*.cpp'
					}
					exportedHeaders {
						srcDir 'include'
					}
					lib library: 'postgres'
					lib project: ':Data', library: 'Data'
					lib project: ':Foundation', library: 'Foundation'
				}
			}
		}
	}
	binaries {
		all {
		}
		withType(SharedLibraryBinarySpec) {
			if (toolChain in VisualCpp) {
				 cppCompiler.define "PostgreSQL_EXPORTS"
			}
		}
		withType(StaticLibraryBinarySpec) {
		}
	}
}


